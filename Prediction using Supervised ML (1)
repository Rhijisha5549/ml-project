{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Prediction using Supervised ML","provenance":[],"authorship_tag":"ABX9TyOP4QwmXQnZaKRHMx+/FXcy"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"1M3yc5ZCz356"},"source":["# Name : Rhijisha Dutta\n","\n","# The Spark Foundation GRIPJuly21\n","\n","# Data Science and Business Analytics Intern at The Spark Foundation\n","\n","# Task1 : Prediction using Supervised ML"]},{"cell_type":"markdown","metadata":{"id":"OdHINu9CvXJq"},"source":["## Linear Regression\n","Here I have implemented simple Linear Regression involving two variables.I have imported all the libraries required in this notebook.\n","\n","## Simple Linear Regression\n","Here we will predict the percentage of marks that a student is expected to score based upon the number of hours they studied. This is a simple linear regression task as it involves just two variables.\n","\n","# Author: Rhijisha Dutta"]},{"cell_type":"code","metadata":{"id":"D89ZzZixlwW8"},"source":["# Importing all moddules required in this notebook\n","import pandas as pd\n","import numpy as np  \n","import matplotlib.pyplot as plt  \n","%matplotlib inline"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SitA0SshlwM8","executionInfo":{"status":"ok","timestamp":1625203811787,"user_tz":-330,"elapsed":450,"user":{"displayName":"Rhijisha Dutta","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjrwKyvIQJWa6r3td9eobawYCRI77Ho1h_YPCVkxQ=s64","userId":"17934656219093289038"}},"outputId":"e9063ce7-f6f0-4f50-d9dc-aa2a113741e3"},"source":["##Importing the Dataframe and storing it in variable df\n","df = pd.read_csv('Percentage.csv')\n","print(\"Data imported successfully\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Data imported successfully\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":357},"id":"cou4CfcFnQg9","executionInfo":{"status":"ok","timestamp":1625203862427,"user_tz":-330,"elapsed":465,"user":{"displayName":"Rhijisha Dutta","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjrwKyvIQJWa6r3td9eobawYCRI77Ho1h_YPCVkxQ=s64","userId":"17934656219093289038"}},"outputId":"ccd76c7c-7077-4a98-b120-93acfaa0b118"},"source":["#Using the head() method to display 10 rows from starting of the Dataframe\n","df.head(10)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Hours</th>\n","      <th>Scores</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2.5</td>\n","      <td>21</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>5.1</td>\n","      <td>47</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3.2</td>\n","      <td>27</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>8.5</td>\n","      <td>75</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3.5</td>\n","      <td>30</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>1.5</td>\n","      <td>20</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>9.2</td>\n","      <td>88</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>5.5</td>\n","      <td>60</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>8.3</td>\n","      <td>81</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>2.7</td>\n","      <td>25</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Hours  Scores\n","0    2.5      21\n","1    5.1      47\n","2    3.2      27\n","3    8.5      75\n","4    3.5      30\n","5    1.5      20\n","6    9.2      88\n","7    5.5      60\n","8    8.3      81\n","9    2.7      25"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"markdown","metadata":{"id":"FdGBwNp7wFse"},"source":["# Here we will plot our data points on 2-D graph to visualize our dataset and see if we can manually find any relationship between the data.We will create the plot with the following script"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"SKt2yiTeliSr","executionInfo":{"status":"ok","timestamp":1625204232993,"user_tz":-330,"elapsed":658,"user":{"displayName":"Rhijisha Dutta","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjrwKyvIQJWa6r3td9eobawYCRI77Ho1h_YPCVkxQ=s64","userId":"17934656219093289038"}},"outputId":"79dd3565-126d-4fd5-a716-87f22bcb12d7"},"source":["# Plotting the distribution of scores\n","plt.scatter(x=df.Hours,y=df.Scores,s=30,color='red')\n","plt.title('Hours vs Percentage')\n","plt.xlabel('Hours Studied')\n","plt.ylabel('Percentage Score')\n","plt.grid()\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"Hv6Tx-iMwgeq"},"source":["# Here we can see that there is a positive linear relation between the number of hours studied and percentage of score\n","\n","# Prepairing the data\n","\n"," I have divided the data into attributes(inputs)and labels(outputs)."]},{"cell_type":"code","metadata":{"id":"ta9CV3J3tPcq"},"source":["X = df.iloc[:, :-1].values  \n","y = df.iloc[:, 1].values "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zpD8T_7wxBaP"},"source":["## Now that we have our attributes and labels, the next step is to split this data into training and test sets. I have done this by using Scikit-Learn's built-in train_test_split() method:"]},{"cell_type":"code","metadata":{"id":"Ny7o90ZHtPZh"},"source":["from sklearn.model_selection import train_test_split  \n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QTOX9lUFxSPv"},"source":["# Training the Algorithm\n","We have split our data into training and testing sets, and now is finally the time to train our algorithm."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9D8IDvRttPUH","executionInfo":{"status":"ok","timestamp":1625204092238,"user_tz":-330,"elapsed":463,"user":{"displayName":"Rhijisha Dutta","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjrwKyvIQJWa6r3td9eobawYCRI77Ho1h_YPCVkxQ=s64","userId":"17934656219093289038"}},"outputId":"62da4e8d-b43a-4945-a4e7-fa12860b5a55"},"source":["from sklearn.linear_model import LinearRegression  \n","reg = LinearRegression()  \n","reg.fit(X_train, y_train) \n","\n","print(\"Model Training done\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model Training done\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"Of1DoXe2tPRY","executionInfo":{"status":"ok","timestamp":1625204330268,"user_tz":-330,"elapsed":602,"user":{"displayName":"Rhijisha Dutta","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjrwKyvIQJWa6r3td9eobawYCRI77Ho1h_YPCVkxQ=s64","userId":"17934656219093289038"}},"outputId":"72c3b0c6-daab-4b0b-80e8-c6fbed33abc3"},"source":["# Plotting the regression line\n","plt.scatter(x=df.Hours,y=df.Scores,s=30,color='red')\n","plt.plot(df.Hours,reg.predict(df[['Hours']]),color='blue')\n","plt.title('Hours vs Percentage')\n","plt.xlabel('Hours Studied')\n","plt.ylabel('Percentage Score')\n","plt.grid()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Qqc66YHKtPOH","executionInfo":{"status":"ok","timestamp":1625204362368,"user_tz":-330,"elapsed":446,"user":{"displayName":"Rhijisha Dutta","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjrwKyvIQJWa6r3td9eobawYCRI77Ho1h_YPCVkxQ=s64","userId":"17934656219093289038"}},"outputId":"37ce4863-42e9-4ef3-c8bb-429fe786290f"},"source":["print(X_test) # Testing data - In Hours\n","y_pred = reg.predict(X_test) # Predicting the scores"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[1.5]\n"," [3.2]\n"," [7.4]\n"," [2.5]\n"," [5.9]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":203},"id":"rXNsnCKftPK_","executionInfo":{"status":"ok","timestamp":1625204448022,"user_tz":-330,"elapsed":654,"user":{"displayName":"Rhijisha Dutta","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjrwKyvIQJWa6r3td9eobawYCRI77Ho1h_YPCVkxQ=s64","userId":"17934656219093289038"}},"outputId":"8c9b3e53-cf34-4e3a-bab7-1377f952a50c"},"source":["# Comparing Actual vs Predicted\n","df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})  \n","df "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Actual</th>\n","      <th>Predicted</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>20</td>\n","      <td>16.884145</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>27</td>\n","      <td>33.732261</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>69</td>\n","      <td>75.357018</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>30</td>\n","      <td>26.794801</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>62</td>\n","      <td>60.491033</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Actual  Predicted\n","0      20  16.884145\n","1      27  33.732261\n","2      69  75.357018\n","3      30  26.794801\n","4      62  60.491033"]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MaEHunRItPBH","executionInfo":{"status":"ok","timestamp":1625204479617,"user_tz":-330,"elapsed":731,"user":{"displayName":"Rhijisha Dutta","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjrwKyvIQJWa6r3td9eobawYCRI77Ho1h_YPCVkxQ=s64","userId":"17934656219093289038"}},"outputId":"b074272e-8427-4b50-e055-8959f8cdc480"},"source":["# You can also test with your own data\n","hours = [[9.25]]\n","own_pred = reg.predict(hours)\n","print(\"No of Hours = {}\".format(hours))\n","print(\"Predicted Score = {}\".format(own_pred[0]))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["No of Hours = [[9.25]]\n","Predicted Score = 93.69173248737539\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"iCjETJXcx8Mu"},"source":["# Evaluating the model\n","Here we have evaluated the performance of our algorithm."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Qmig-E9WtNpA","executionInfo":{"status":"ok","timestamp":1625204539535,"user_tz":-330,"elapsed":527,"user":{"displayName":"Rhijisha Dutta","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjrwKyvIQJWa6r3td9eobawYCRI77Ho1h_YPCVkxQ=s64","userId":"17934656219093289038"}},"outputId":"e14bbbf7-fd1e-423a-f2a8-c7acf5755c17"},"source":["from sklearn import metrics  \n","print('Mean Absolute Error:', \n","      metrics.mean_absolute_error(y_test, y_pred)) "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mean Absolute Error: 4.183859899002982\n"],"name":"stdout"}]}]}